name: Android Release Build

on:
  release:
    types: [published]

jobs:
  validation:
    name: "Gradle wrapper Validation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: gradle/wrapper-validation-action@v1

  build:
    needs: validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permissions
        run: chmod +x gradlew

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Provide Firebase config to app module
        env:
          FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
        run: echo $FIREBASE_CONFIG > ./app/google-services.json

      - name: Provide Firebase config to online module
        run: echo $FIREBASE_CONFIG > ./online/google-services.json

      - name: Build with gradle
        run: ./gradlew buildRelease

  unit-tests:
    needs: validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permissions
        run: chmod +x gradlew
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Provide Firebase config to app module
        env:
          FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
        run: echo $FIREBASE_CONFIG > ./app/google-services.json

      - name: Provide Firebase config to online module
        run: echo $FIREBASE_CONFIG > ./online/google-services.json

      - name: Run tests
        run: ./gradlew testRelease

      - name: Output test results
        uses: actions/upload-artifact@v2
        with:
          name: Unit test results
          path: "**/build/reports/tests/testReleaseUnitTest/"

  instrumented-test:
    needs: validation
    runs-on: macos-latest
    timeout-minutes: 60
    strategy:
      matrix:
        api_level: [21, 24, 27, 30]
        target: [default, google_apis]
        exclude:
          # Excluding as 30-default is not supported by emulator yet
          - api_level: 30
            target: default

    steps:
      - uses: actions/checkout@v2
        name: Checkout

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permissions
        run: chmod +x gradlew

      - name: Provide Firebase config to app module
        env:
          FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
        run: echo $FIREBASE_CONFIG > ./app/google-services.json

      - name: Provide Firebase config to online module
        run: echo $FIREBASE_CONFIG > ./online/google-services.json

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api_level }}
          target: ${{ matrix.target }}
          script: ./gradlew core:connectedAndroidTest app:connectedAndroidTest -DtestBuildType=release

      - name: Output test results
        uses: actions/upload-artifact@v2
        with:
          name: Instrumented test results (${{ matrix.api_level }}-${{ matrix.target }})
          path: "**/build/reports/androidTests/connected/flavors/releaseAndroidTest"


  release:
    needs: [build, unit-tests, instrumented-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permissions
        run: chmod +x gradlew

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Provide Firebase config to app module
        env:
          FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
        run: echo $FIREBASE_CONFIG > ./app/google-services.json

      - name: Provide Firebase config to online module
        run: echo $FIREBASE_CONFIG > ./online/google-services.json

      - name: Build Universal APK with Gradle
        run: ./gradlew packageReleaseUniversalApk

      - name: Sign Android release
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/universal_apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      - name: Get release details
        id: get_release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release APK to Github Releases
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.sign_app.outputs.signedReleaseFile }}
          asset_name: Healers-Diary-${{ steps.get_release.outputs.tag_name }}.apk
          asset_content_type: application/vnd.android.package-archive
      - uses: actions/upload-artifact@v2
        name: Upload Release APK to this action
        with:
          name: Healers-Diary-${{ steps.get_release.outputs.tag_name }}.apk
          path: ${{steps.sign_app.outputs.signedReleaseFile}}